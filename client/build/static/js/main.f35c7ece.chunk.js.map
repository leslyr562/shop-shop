{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","redux/reducers/index.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","state","useSelector","cart","dispatch","useDispatch","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","products","useQuery","loading","data","useEffect","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","catagories","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","cartOpen","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","variables","i","push","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","initialState","reducer","previousState","action","newPreviousState","createStore","composeWithDevTools","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f35c7ece.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n\n  });\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  // const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => {\n    return { cart: state.cart };\n  });\n  const dispatch = useDispatch();\n\n  const { cart } = state;\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n\n  // const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => {\n    return { currentCategory: state.currentCategory, products: state.products };\n  });\n  const dispatch = useDispatch();\n\nconst { currentCategory } = state;\n\nconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\nuseEffect(() => {\n  if(data) {\n    dispatch({\n      type: UPDATE_PRODUCTS,\n      products: data.products\n    });\n\n    data.products.forEach((product) => {\n      idbPromise('products', 'put', product);\n    });\n    // add else if to check if `loading` is undefined in `useQuery()` Hook\n  } else if (!loading) {\n    // since we're offline, get all of the data from the `products` store\n    idbPromise('products', 'get').then((products) => {\n      // use retrieved data to set global state for offline browsing\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: products\n      });\n    });\n  }\n}, [data, loading, dispatch]);\n\nfunction filterProducts() {\n  if (!currentCategory) {\n    return state.products;\n  }\n\n  return state.products.filter(product => product.category._id === currentCategory);\n}\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n// import { useStoreContext } from \"../../utils/GlobalState\";\nimport { idbPromise } from '../../utils/helpers';\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction CategoryMenu() {\n\n  // const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => {\n    return { catagories: state.catagories };\n  });\n  const dispatch = useDispatch();\n\n\nconst { categories } = state;\n\nconst { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n//UseEffect works on two arguments, a function to run given a certain condition, and then the condition.\nuseEffect(() => {\n  if (categoryData) {\n    dispatch({\n      type: UPDATE_CATEGORIES,\n      categories: categoryData.categories\n    });\n    categoryData.categories.forEach(category => {\n      idbPromise('categories', 'put', category);\n    });\n  } else if (!loading) {\n    idbPromise('categories', 'get').then(categories => {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categories\n      });\n    });\n  }\n}, [categoryData, loading, dispatch]);\n\nconst handleClick = id => {\n  dispatch({\n    type: UPDATE_CURRENT_CATEGORY,\n    currentCategory: id\n  });\n};\n\nreturn (\n  <div>\n    <h2>Choose a Category:</h2>\n    {categories.map(item => (\n      <button\n        key={item._id}\n        onClick={() => {\n          handleClick(item._id);\n        }}\n      >\n        {item.name}\n      </button>\n    ))}\n  </div>\n);\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport {  useDispatch } from \"react-redux\";\n\nconst CartItem = ({ item }) => {\n  \n    const dispatch = useDispatch();\n\n    const removeFromCart = item => {\n        dispatch({\n          type: REMOVE_FROM_CART,\n          _id: item._id\n        });\n        idbPromise('cart', 'delete', { ...item });\n      };\n\n      //change data while offline\n    const onChange = (e) => {\n        const value = e.target.value;\n\n        if (value === '0') {\n            dispatch({\n              type: REMOVE_FROM_CART,\n              _id: item._id\n            });\n          \n            idbPromise('cart', 'delete', { ...item });\n          } else {\n            dispatch({\n              type: UPDATE_CART_QUANTITY,\n              _id: item._id,\n              purchaseQuantity: parseInt(value)\n            });\n          \n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n          }\n    };\n    return (\n        <div className=\"flex-row\">\n            <div>\n                <img\n                    src={`/images/${item.image}`}\n                    alt=\"\"\n                />\n            </div>\n            <div>\n                <div>{item.name}, ${item.price}</div>\n                <div>\n                    <span>Qty:</span>\n                    <input\n                        type=\"number\"\n                        placeholder=\"1\"\n                        value={item.purchaseQuantity}\n                        onChange={onChange}\n                    />\n                    <span\n                        role=\"img\"\n                        aria-label=\"trash\"\n                        onClick={() => removeFromCart(item)}\n                    >\n                        🗑️\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\nimport { useLazyQuery } from '@apollo/client';\n\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n\n\nconst Cart = () => {\n  // const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => {\n    return { cart: state.cart, cartOpen: state.cartOpen };\n});\nconst dispatch = useDispatch();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  //getting things to save into the idb even after closing tab \n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  //watch for changes to data. We'll use the stripePromise object to \n//redirect to Stripe once the data variable has data in it.\nuseEffect(() => {\n  if (data) {\n    stripePromise.then((res) => {\n      res.redirectToCheckout({ sessionId: data.checkout.session });\n    });\n  }\n}, [data]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    getCheckout({\n      variables: { products: productIds }\n    });\n  \n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n  }\n\n  //You should always wrap emojis (like the shopping cart icon) \n  //in a span element that includes role and aria-label attributes.\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  console.log(state)\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\n// import { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport Cart from '../components/Cart';\nimport { idbPromise } from \"../utils/helpers\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction Detail() {\n  // const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => {\n    return { products: state.products, cart: state.cart };\n  });\n\n  const dispatch = useDispatch();\n\n  console.log(state)\n\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n    //not sure if to pass this function here \n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","\r\nimport {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n  } from '../../utils/actions';\r\n\r\n\r\nconst initialState ={\r\n    products: [],\r\n        cart: [],\r\n        cartOpen: false,\r\n        categories: [],\r\n        currentCategory: ''\r\n}\r\n\r\nconst reducer = (previousState = initialState, action)=> {\r\n    switch (action.type) {\r\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n        case UPDATE_PRODUCTS:\r\n          return {\r\n            ...previousState,\r\n            products: [...action.products]\r\n          };\r\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n        case UPDATE_CATEGORIES:\r\n          return {\r\n            ...previousState,\r\n            categories: [...action.categories]\r\n          };\r\n        case UPDATE_CURRENT_CATEGORY:\r\n          return {\r\n            ...previousState,\r\n            currentCategory: action.currentCategory\r\n          };\r\n        case ADD_TO_CART:\r\n          return {\r\n            ...previousState,\r\n            cartOpen: true,\r\n            cart: [...previousState.cart, action.product]\r\n          };\r\n        case ADD_MULTIPLE_TO_CART:\r\n          return {\r\n            ...previousState,\r\n            cart: [...previousState.cart, ...action.products],\r\n          };\r\n        case REMOVE_FROM_CART:\r\n          let newPreviousState = previousState.cart.filter(product => {\r\n            return product._id !== action._id;\r\n          });\r\n    \r\n          return {\r\n            ...previousState,\r\n            cartOpen: newPreviousState.length > 0,\r\n            cart: newPreviousState\r\n          };\r\n    \r\n        case UPDATE_CART_QUANTITY:\r\n          return {\r\n            ...previousState,\r\n            cartOpen: true,\r\n            cart: previousState.cart.map(product => {\r\n              if (action._id === product._id) {\r\n                product.purchaseQuantity = action.purchaseQuantity;\r\n              }\r\n              return product;\r\n            })\r\n          };\r\n        case CLEAR_CART:\r\n          return {\r\n            ...previousState,\r\n            cartOpen: false,\r\n            cart: []\r\n          };\r\n        case TOGGLE_CART:\r\n          return {\r\n            ...previousState,\r\n            cartOpen: !previousState.cartOpen\r\n          };\r\n    \r\n        default:\r\n          return previousState;\r\n      }\r\n\r\n}\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from './reducers/index'\r\n\r\nexport const store = createStore(reducer, composeWithDevTools())","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport Success from './pages/Success';\n// import { StoreProvider } from \"./utils/GlobalState\";\nimport OrderHistory from './pages/OrderHistory';\n\n//importing all redux code\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store'\n\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}